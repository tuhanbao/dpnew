这是一套关于设计原则（SOLID原则）和23种设计模式的学习课程。

其实关于设计原则和模式的书籍非常繁多，网上关于设计原则和模式的二次解读的文章博客更是数不胜数。
我看过一些，不能说太多，但绝对不少。
整体看下来给我的感觉是除了几本名著外所有的其他文章或书籍，都是大同小异，少有真知灼见，甚至很多都存在误导。
这也是我决定再起炉灶从零做这一门课程的原因。

“Everything in software architecture is a trade-off” —— Neal Ford
软件设计中没有银弹。我想，一本好的设计原则或模式的书，应该不是一味鼓吹设计的好，还应该揭露设计中的“坏”。
任何一个设计策略的实施几乎都伴随着要增加一个新的接口或者中间层，天下没有免费的设计。

我并非一名经典设计原则和模式的摇旗呐喊者。
恰恰相反，我个人认为SOLID设计原则的定义不够准确精炼而且存在重复（在后面的章节会一一提到）。
至于设计模式，更是像极了中学的几何老师在黑板上罗列了23道题目应该如何作辅助线解题，学生只知道老师的解题方法非常精妙，但是一旦换个题目依然不会，更可怕的是有些学生还会把老师所作的辅助线背下来应用到所有题目中。
没有一条辅助线是万能的，我们要学习的是做辅助线底层的逻辑和原理：什么时候不该作辅助线，什么时候该作，要如何做。
这也正是本门课程想要解答的问题。


如果你是一名想学习设计模式的新人；那么我推荐你学习本课程，因为本课程很少使用一些虚无缥缈的专业词汇，而是通过生活中的例子或者简单的代码来讲解软件设计的本质和原理；对于23种设计模式更是每个都精挑细选了一个经典案例，用以说明每种模式的好处和不足。
如果你已经接触过设计原则或模式，对设计的一些理念或方式将信将疑，仅仅是迫于软件设计的权威被迫叫好（如果是你自己的代码，你并不愿意去使用这些模式）；那么我推荐你学习本课程，因为当你质疑设计模式的时候，本课程会告诉你“你是对的”，本课程有大量内容对经典的设计原则和模式进行批判和否定，它将会成为你思考和继续学习的引领者。
如果你是一位软件领域资深从业人员，对于抽象，分治，可扩展，高内聚低耦合，解耦这些名字都有所理解；那么我推荐你学习本课程，因为本书会从一个另类的角度来看待我们目前的设计原则和模式，并会对所有的设计理念进行归纳和总结，这必定会给你带来一个全新视角的参考。

本课程主要分为三部分：
第一部分讲解软件设计的本质；
第二部分讲解设计原则；
第三部分剖析设计原则在23种设计模式中如何应用；
本书的后面部分会依赖前面部分的一些概念或逻辑，我建议读者按照课程目录依次学习这三个部分。