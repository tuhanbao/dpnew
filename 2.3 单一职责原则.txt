单一职责原则是面向对象设计原则中最重要也是最难实施的原则。


**单一职责原则（Single Responsibility Principle,SRP）**：一个类应该只有一个变化因子。

单一职责原则的定义其实过于狭隘和保守，这个原则的作用范围远不止“类”，我们可以稍微改下：

**单一职责原则（Single Responsibility Principle,SRP）**：任何软件组成单元都应该只有一个变化因子。

> 单一职责原则的适用范围甚至不仅仅是软件行业，它几乎可以应用在我们从事生产活动的各行各业。

### 两个例子

在讲解单一原则之前，我们先来看两个例子

#### 例子1
假设下面这幅画是一幅“巨著”，工作量巨大，我们需要将它分配给四个“画家”协作进行完成，该如何划分？
![](D:\tuhanbao\软件设计\image\image-20211116184006176.png)

一种最简单粗暴的分法方式一：水平垂直各砍一刀，平分为四块，每人各画一部分。

![](D:\tuhanbao\软件设计\image\image-20211116195031986.png)

还有一种分法方式二：按照元素来分。
一人画天空：

![](D:\tuhanbao\软件设计\image\image-20211116195221968.png)

一人画大山：

![](D:\tuhanbao\软件设计\image\image-20211116195317146.png)

一人画树林：

![](D:\tuhanbao\软件设计\image\image-20211116195350093.png)

最后一个设计签名：

![](D:\tuhanbao\软件设计\image\image-20211116195405296.png)

如果仅仅是完成这幅画，两种方式工作量其实差距不大。但后续如果需要修改这幅画，两种方式就很有区别了。
- 比如要修改白云的颜色，会发现画家一和画家二都需要改动，而且工作比较雷同；
- 如果是修改大山，四个画家甚都要修改而且还要对齐边界，否则最后拼不起来可就麻烦了；
- 又或者突然哪天又要新作一幅画，要求有同样的logo，那么方式二可以直接把签名拿去复用，但方式一就很难抠出来了；

这个例子中，方式一类比的是面向过程式的设计，方式二则是面向对象式的设计。前者极难复用，发生变更时与周边模块耦合严重，很多逻辑也不够聚集，项目一旦庞大会变得复杂无比；后者复用性强，各模块互不影响，可各自扩展。

在项目足够小而且简单的情况下（比如一个简单的编程题），面向过程的工作量一般会更小，开发速度更快；而面向对象或多或少会有一些冗余工作（画中有一部分太阳会被大山遮挡，其实可以不画，相当于有部分工作量的浪费，面向对象也是如此），但是一旦项目相对稍大的时候，由于面向对象的逻辑相关性和可复用性，会导致最终的开发工作量、维护工作量都会远小于前者；

#### 例子2

软件领域有一个经常使用的隐喻：冰箱装大象，如果使用代码表示，会有以下一些方式：
```
// 方式一
public void putElephant2Fridge() {
    openFridgeDoor();
    putElephant();
    closeFridgeDoor();
}

private openFridgeDoor() {
    // open the fridge door start ...
    // some code
    // open the fridge door end   ...
}

private putElephant() {
    // put elephant start ...
    // some code
    // put elephant end   ...
}

private closeFridgeDoor() {
    // close the fridge door start ...
    // some code
    // close the fridge door end   ...
}
```

```
// 方式二
public void putElephant2Fridge() {
    openFridgeDoor();
    putElephantAndClose();
}

private openFridgeDoor() {
    // open the fridge door start ...
    // some code
    // open the fridge door end   ...
}

private putElephantAndClose() {
    // put elephant start ...
    // some code
    // put elephant end   ...

    // close the fridge door start ...
    // some code
    // close the fridge door end   ...
}
```

```
// 方式三
public void putElephant2Fridge() {
    // open the fridge door start ...
    // some code
    // open the fridge door end   ...

    // put elephant start ...
    // some code
    // put elephant end   ...

    // close the fridge door start ...
    // some code
    // close the fridge door end   ...
}
```

```
// 方式四
public void putElephant2Fridge() {
    openFridgeDoor();
    // put elephant start ...
    // some code
    // put elephant end   ...
    closeFridgeDoor();
}

private openFridgeDoor() {
    // open the fridge door start ...
    // some code
    // open the fridge door end   ...
}

private closeFridgeDoor() {
    // close the fridge door start ...
    // some code
    // close the fridge door end   ...
}
```


我们如果把冰箱放大像简单的看成四个函数和几行代码的拼凑，那么这四种不同方式代码的好坏则很难评判。因为即使我们按照方式三面向过程流水线的方式来写也不会有太大问题，写的再烂就这么几行代码，好点差点区别并不大。但如果我们将思维拔高一些，不要局限于改了两行还是三行代码，而是从代码的可复用性来评判，则会大有区别：我们可以将开冰箱门，放大象和关冰箱门想象成三个模块或者三段很庞大而且复杂的逻辑，按照我们之前讲过的**改是一个质的问题，改多少是一个量的问题**，我们来比较哪种写法会让需求发生变更时影响的范围最小（比如不要引起不相关代码的重新编译等），此时再来评判代码优劣则会容易理解很多。

稍微分析一下，会发现方式一要优于方式二和方式三，方式二把放大像和关冰箱门放在了一起，一旦放大象和关门任何一方的业务逻辑放生变更，由于两者的代码纠缠在一起，就会互相影响；方式三则更过分，把开冰箱门也揉了进去，任何一方变更都会影响所有。至于方式四，和方式一好像差不多；开冰箱门，放大象和关冰箱门任何一个模块的业务发生变更都只会影响一处逻辑。

很明显，方式二和方式三违反了单一职责原则，他们并没有“专心的做一件事”。
但仔细思考一下，会发现一些问题：putElephant2Fridge函数要完成把大象放冰箱的功能，无论方式一、方式二还是方式三，putElephant2Fridge函数对调用者来说做的事情都是一样的，没有多也没有少；只不过区别在于，它把所要做的事情，是分给三个子函数做、两个子函数做，还是自己一个人全部做完而已。

这其实很像一个大领导，把一个比较大的项目交给一个小领导，如果以结果为导向的话，只要这个小领导把项目搞定了，就算成功。至于这个小领导是把所有的事情自己一个人全干了，还是如何内部再分工，对大领导来说都不太关心，他要的只是结果。从这个角度看，putElephant2Fridge函数好像没有违反单一职责原则。
实际情况是，将所有的事情一个人扛，或者把过多的事情分给一个下属都是一种管理失职：管理本身就是一件事，而这件事最容易被忽略！

我分开问过许多同事，均非常一致的认为：方式二和方式三违反了单一职责原则，方式二违反单一的是putElephantAndClose函数，方式三违反单一的是putElephant2Fridge函数；如果我再具体的问方式二中putElephant2Fridge函数有没有违反单一原则，他们给出的答案都是**没有**。至于方式四，会出现一些分歧，有些人认为违反了单一职责原则，有些人认为没有；当我问方式四哪里违反了单一职责原则，大部分人都会模棱两可。

方式二中的putElephantAndClose和方式三的putElephant2Fridge做了多件事，我们大都能轻易发现；而方式二和方式四中的putElephant2Fridge违反了单一职责原则却很难被发现。

我们可以列举一个场景看下方式四这种越级所带来的缺点：

假设我们放大象的时候希望塞一些冰块，以防止大象腐烂，将流程变为：开冰箱门->放大象->塞冰块->关冰箱门。整个需求变更只是改变了流程，加了一个环节，原本的开门，放大象和关门并没有任何改变，此时方式二和方式三肯定会受到影响，方式四由于把放大象的逻辑放在了主函数中，也会因为流程变更被影响；只有方式一表现如初，三个逻辑块都不会感知这种变动。

```
public void putElephant2Fridge() {
    openFridgeDoor();
    putElephant();
	
	// 新增流程
	addIce();
	
    closeFridgeDoor();
}
```

可见，当函数的流程（即协调和管理工作）本身就可能成为一个变化因子的时候，也是应该当做一件单独的事情进行隔离的。
此时我们再来梳理下，各个函数真正应该做的“**一件事**”是什么：
- putElephant2Fridge函数：协调好冰箱装大象各步骤的调用关系和顺序；
- openFridgeDoor函数：做好开冰箱门这件事；
- putElephant函数：做好放大象这件事；
- closeFridgeDoor函数：做好关冰箱门这件事；


> 设计原则中有一个“最少知道原则”，常常就是因为越级引起的，一个高层类或函数关注了太多的下层逻辑，本质上还是违反了单一职责原则，因为具体的执行细节虽然“归你管”，但“不归你做”。



### 什么是一

从上面两个例子，我们可以看出：

“一”其实是有“层次”之分的，对于同一个层次的内容进行垂直切割，不同层次的内容进行水平切割。

- 垂直：第一个例子中的画分为四个模块，每个模块可能工作量有大有小，但是他们并没有高低之分；以及第二个例子中的开门，放大象和关门，也是同一个层次划分出来的一；

- 水平：第二个例子中的putElephant2Fridge函数也是一个“一”，但它明显和开门，放大象和关门不在一个层次上，它是通过水平方式切出来的一个“一”；

  

  如果拿中国的行政划分来举例，省和市则是水平分割出来的两个概念，而眉山市和绵阳市则是垂直切割出来的两个概念。

// TODO 看是否上一张图

- 一个国家，需要先分成一个一个省，再分成一个一个市，然后是区县，乡镇，村/街道，最后才是一个一个具体家庭和自然人；
- 一篇复杂的论文，可以分为若干章，每一章再分为若干节，每一节又分为若干段，再由最基本的一句话，一个字组成；
这种金字塔式的递归划分方式主宰着整个人类社会：公司的组织结构，数字（个十百千万），时间（秒分时天月年）都是如此。

“**一**”是一个相对的概念，可大可小；脱离了**层次**谈“**一**”毫无意义。

对于王健林来说，赚一个亿是一件小事；而对于一名家庭主妇而言，一日三餐却是每天最重要的三件大事；王健林和家庭主妇24小时都只能干一天的活，两个人仅仅是角色和层次不同而已。家庭主妇做的是具体的事，我们不能她干的是家务活就否定她做的不是一件事；王健林做的是一些决策和规划，虽然最终一个亿是由下面的基层员工挣来的，但我们也不能因此就否定这些决策和规划的重要性，更不能要求王健林到工厂去拧螺丝。

至此，我们应该能体会到单一职责原则所做的事情：**拆解**。

通过横向和纵向合理分割形成我们的金字塔，最终让每一层的每一个单元聚焦于一件事，而这种横向和纵向的切割点便是我们要寻找的变化因子。


### 如何寻找变化因子？

按照单一职责原则的定义：当一个软件单元包含两个或两个以上的变化因子时，我们就需要拆分它。

但实际情况是，很多时候我们并不是因为发现代码中有多个变化因子而去拆分一个软件单元，往往是因为一个软件单元太“大”了，我们被迫去拆分它：

比如一个服务的性能要求超过了单台服务器的硬件瓶颈、一个模块的代码规模已经大到无法由一个小型团队无法承接，又或者很多公司规定的一个类不能超过2000行，一个函数不能超过50行，等等。这些客观要求或规定，会逼迫我们不得不进行拆分。

久而久之，我们大多数人都养成了一种习惯：当一个函数比较小时，我们基本不会去管它；只有当它变得足够大时，我们才会被迫想办法去拆分它。

可是“大小”从来都不是决定一个软件单元是否应该拆分的决定性因素。

比如JDK中的HashMap中有如下一段代码：

```
final void removeTreeNode(HashMap<K,V> map, Node<K,V>[] tab,
                          boolean movable) {
    int n;
    if (tab == null || (n = tab.length) == 0)
        return;
    int index = (n - 1) & hash;
    TreeNode<K,V> first = (TreeNode<K,V>)tab[index], root = first, rl;
    TreeNode<K,V> succ = (TreeNode<K,V>)next, pred = prev;
    if (pred == null)
        tab[index] = first = succ;
    else
        pred.next = succ;
    if (succ != null)
        succ.prev = pred;
    if (first == null)
        return;
    if (root.parent != null)
        root = root.root();
    if (root == null
        || (movable
            && (root.right == null
                || (rl = root.left) == null
                || rl.left == null))) {
        tab[index] = first.untreeify(map);  // too small
        return;
    }
    TreeNode<K,V> p = this, pl = left, pr = right, replacement;
    if (pl != null && pr != null) {
        TreeNode<K,V> s = pr, sl;
        while ((sl = s.left) != null) // find successor
            s = sl;
        boolean c = s.red; s.red = p.red; p.red = c; // swap colors
        TreeNode<K,V> sr = s.right;
        TreeNode<K,V> pp = p.parent;
        if (s == pr) { // p was s's direct parent
            p.parent = s;
            s.right = p;
        }
        else {
            TreeNode<K,V> sp = s.parent;
            if ((p.parent = sp) != null) {
                if (s == sp.left)
                    sp.left = p;
                else
                    sp.right = p;
            }
            if ((s.right = pr) != null)
                pr.parent = s;
        }
        p.left = null;
        if ((p.right = sr) != null)
            sr.parent = p;
        if ((s.left = pl) != null)
            pl.parent = s;
        if ((s.parent = pp) == null)
            root = s;
        else if (p == pp.left)
            pp.left = s;
        else
            pp.right = s;
        if (sr != null)
            replacement = sr;
        else
            replacement = p;
    }
    else if (pl != null)
        replacement = pl;
    else if (pr != null)
        replacement = pr;
    else
        replacement = p;
    if (replacement != p) {
        TreeNode<K,V> pp = replacement.parent = p.parent;
        if (pp == null)
            (root = replacement).red = false;
        else if (p == pp.left)
            pp.left = replacement;
        else
            pp.right = replacement;
        p.left = p.right = p.parent = null;
    }

    TreeNode<K,V> r = p.red ? root : balanceDeletion(root, replacement);

    if (replacement == p) {  // detach
        TreeNode<K,V> pp = p.parent;
        p.parent = null;
        if (pp != null) {
            if (p == pp.left)
                pp.left = null;
            else if (p == pp.right)
                pp.right = null;
        }
    }
    if (movable)
        moveRootToFront(tab, r);
}
```

这个函数有一百行左右，如果我们因为它超过了50行而强行拆开他，很可能不会有效果甚至有负面作用。试想一下如果我们将这个函数拆成了两个部分，此时因为某个需求需要变更这里的代码，我们是否可以做到只需要理解函数的前半部分或者后半部分就可以完成修改，实际上很难，因为整个函数上下文联系紧密，逻辑关系密切，将这个函数拆成两个部分只会让我们在读代码或者改代码时总是要跨越两个函数。

而下面这个函数，即使只有两行，我们却又不得不拆分：

这段代码来自于真实项目中的一个网关模块，用于将外部消息转换成内部消息。外部消息的格式是一个Map<String, String>类数据，我们需要将它转换成内部数据。而不同类型消息的数据定义也不相同，所以第一步我们需要根据外部消息获取到我们内部的消息码。
所以我们写下了如下代码：

```
	/**
	 * @param map 外部消息
	 */
    public static int getInnerMsgType(Map<String, String> map) {
		// 获取到外部消息的消息码
        int msgType = Integer.valueOf(map.get("MsgType"));
		// 通过映射关系找到内部的消息码
        return MSG_TYPE_MAP.containsKey(msgType) ? MSG_TYPE_MAP.get(msgType) : DEFAULT_MSG_TYPE;
    }
```

但后来有一个业务调用处，也需要根据外部消息码找到内部消息码，此时它也想调用这个函数，发现没法直接使用，因为它拿到的原始数据就是一个int类型。
如果要复用上面这段代码，它需要把代码改成如下：

```
	int outMsgType = XXX;
	
	// 为了调用getInnerMsgType，不得不先封装成map再进行调用。
	Map<String, String> map = new HashMap<>();
	map.put("MsgType", outMsgType + "");
	
	int innerMsgType = getInnterMsgType(map);
	...
```

这种写法看起来就很愚蠢，正确的做法是拆解最开始的getInnerMsgType函数，因为它包含有两个变化因子，在最开始就应该写成这样:

```
    public static int getInnerMsgType(int outMsgType) {
		// 从Map中获取外部消息码的代码则应该移到别处（此处仅为了说明，实际工作中建议删除这行代码，而不是注释掉。）
		// int msgType = Integer.valueOf(map.get("MsgType"));
		// 通过映射关系找到内部的消息码
        return MSG_TYPE_MAP.containsKey(msgType) ? MSG_TYPE_MAP.get(msgType) : DEFAULT_MSG_TYPE;
    }
```


可见，软件单元的大小和变化因子的个数并没有必然联系，换句话说，我们并不能无脑的根据“大小”来决定是否拆分。
即使如此，但不得不说，这种简单粗暴的根据软件单元的大小来判断是否需要拆分的方式非常有效，而且暂时我从未见过与之相比更好的方式。原因如下：
1. 一个大的软件单元在绝大部分情况下都包含了多个“变化因子”。上面的代码片段X这个反例，其实非常少见（只在一些算法函数中比较常见）：首先你要在JDK源码中找到一个一百行的函数本身就不容易，而且它还不能包含多个变化因子，则更是难上加难。

2. 如果我们要求程序员以变化因子来拆分函数，你会发现这非常难以落地，因为不同程序员对变化因子的理解各不相同，而且大部分程序员其实都不能很好的理解变化因子；这种约束最后的结果就是跟没有约束一样，代码中到处都是一个个超大的函数和类。
3. 尽管我们是根据“大”来判断是否来拆解，但是最终执行拆解动作时，实际上找的仍然是变化因子。比如：
```
TODO
```

我们觉得这个函数超过了50行，领导要求我们拆成两个函数，我想应该没有人会拆成如下样子吧：

```
TODO
```

大概率拆分的函数如下：
```
TODO
```
也就是说，虽然我们拆机的动机是“太大了”，但具体执行时其实还是会去寻找变化因子进行拆分，最终的结果仍然是好的。

尽管根据软件单元“大小”来决策拆分是一个很好的方式，但对于我们个人而言，如果想更快的成长，我们就必须从这种被动拆解的思维转变为主动拆解。

试想一下，如果有一天你写出来的代码天然就短小精炼易复用，即使偶尔有几个大函数也是因为确实不需要拆分，这难道不是一件很美好的事吗？（尽管一次性将代码写的几近完美几乎不太可能，但这并不妨碍它作为我们的追求。）
主动拆解的思维，正是在写代码时提前识别到变化因子，并将不同的变化因子分开并集中到不同的软件单元中；而不是先流水线式的写完代码，然后发现函数太长了，再二次加工拆分一下；这两者之间有一道鸿沟。


那么，到底什么是变化因子。我相信从上面已经列举过的一些例子中，很多读者应该也有所体会，变化因子其实就是复用的边界。
- 读复用的边界
  一个函数包含两个变化因子A和B，那么当A和B发生变化时，都会影响到这一整个函数；如果根据变化因子将这个函数拆成两个函数甲和乙，让变化因子A只影响函数甲，变化因子B只影响函数乙，让变动影响的范围更小，便会起到很好的读复用效果。就像代码片段X冰箱装大象一样，一共拆成了四个函数。当然，变化因子并不总是体现在一个函数中，有时候，仅仅只是一个变量。比如下面这段代码：

```
    public long getChildNum(int n) {
        long sum = 0;
        // 获取它的所有孩子的子孙数量
        for (int i = this.birthMonth; i <= Math.min(n, this.birthMonth + 12); i++) {
            // some code ...
        }
        // 自己还活着，再+1
        if (this.birthMonth + 12 > n) {
            sum += 1;
        }
        // some code ...
    }
```

这个函数是用来计算兔子有多少个子孙（包含它自己），我们不用太关心这段函数的逻辑，只需要注意里面有两个int常量12即可，它代表一只兔子的寿命。

现在这段代码其实至少就有两个变化因子：

1. 计算兔子子孙的逻辑本身
2. 兔子的寿命
这两者任一发生变化，都需要改动这个函数。如果按照变化因子进行拆分，至少应该先改成如下：

```
	// 在某处定义兔子的寿命常量LIFE
    private static final int LIFE = 12;
	
    public long getChildNum(int n) {
        long sum = 0;
        // 获取它的所有孩子的子孙数量
        for (int i = this.birthMonth; i <= Math.min(n, this.birthMonth + LIFE); i++) {
            // some code ...
        }
        // 自己还活着，再+1
        if (this.birthMonth + LIFE > n) {
            sum += 1;
        }
        // some code ...
    }
```


试想一下，当兔子的寿命从12个月变成24个月时，前者你还得到处寻找哪里用到了这个12，然后把每一个用到的地方将改成24，而且经常容易改漏；但后者只需要修改常量LIFE的赋值即可。

- 写复用的边界
  下面这个函数，给服务器新增一个IP，逻辑其实很简单，就是先校验然后执行一条命令就结束了：

```
public boolean addIP(IPInfo ipInfo) {
    // 校验IP信息
    if (!IPUtil.isStrictIpv4(ipInfo.getIp())) {
        throw new MyException("IP " + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (isIPExist(ipInfo.getIp())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SAVE_FLOATIP_ERROR_MESSAGE));
    } else if (!ArrayUtil.contain(getDeviceList(), ipInfo.getNetworkInterface())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_NETWORK_INTERFACE)
                + getText(LanguageResource.WEB_INTERFACE_ADMIN_IPDEVICE_STATUS_INVALID));
    } else if (!IPUtil.isNetMask(ipInfo.getNetmask())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_NEW_NETMASK)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (!IPUtil.isIpv4(ipInfo.getGateway())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_OLD_GATEWAY)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    }

    boolean isSuccess = CMDUtil.excuteCmd(SET_IP_CMD).isSuccess();
    return isSuccess;
}
```

仅仅只看这一段代码，我们其实可以说它只做了一件事，那就是新增IP，也可以说它只有一个变化因子，那就是新增IP的逻辑。
但如果后面我们又增加了一个更新IP信息的功能：
```
public boolean updateIP(IPInfo ipInfo) {
    // 校验IP信息
    if (!IPUtil.isStrictIpv4(ipInfo.getIp())) {
        throw new MyException("IP " + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (isIPExist(ipInfo.getIp())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SAVE_FLOATIP_ERROR_MESSAGE));
    } else if (!ArrayUtil.contain(getDeviceList(), ipInfo.getNetworkInterface())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_NETWORK_INTERFACE)
                + getText(LanguageResource.WEB_INTERFACE_ADMIN_IPDEVICE_STATUS_INVALID));
    } else if (!IPUtil.isNetMask(ipInfo.getNetmask())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_NEW_NETMASK)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (!IPUtil.isIpv4(ipInfo.getGateway())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_OLD_GATEWAY)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    }

    // some other code.
    return true;
}
```

我们发现，更新IP的新增IP的校验逻辑完全一模一样。此时我们很可能会改变我们的想法，我们会说之前的那个函数其实做了两件事，即有两个变化因子：一个是校验IP的逻辑，一个是执行新增IP的逻辑。

我们的代码也大概率改为：

```
public boolean addIP(IPInfo ipInfo) {
    // 校验IP信息
    checkIP(ipInfo);

    boolean isSuccess = CMDUtil.excuteCmd(SET_IP_CMD).isSuccess();
    return isSuccess;
}

public boolean updateIP(IPInfo ipInfo) {
    // 校验IP信息
    checkIP(ipInfo);

    // some other code.
    return true;
}

private static void checkIP(IPInfo ipInfo) {
    if (!IPUtil.isStrictIpv4(ipInfo.getIp())) {
        throw new MyException("IP " + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (isIPExist(ipInfo.getIp())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SAVE_FLOATIP_ERROR_MESSAGE));
    } else if (!ArrayUtil.contain(getDeviceList(), ipInfo.getNetworkInterface())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_NETWORK_INTERFACE)
                + getText(LanguageResource.WEB_INTERFACE_ADMIN_IPDEVICE_STATUS_INVALID));
    } else if (!IPUtil.isNetMask(ipInfo.getNetmask())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_NEW_NETMASK)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    } else if (!IPUtil.isIpv4(ipInfo.getGateway())) {
        throw new MyException(getText(LanguageResource.WEB_INTERFACE_SCA_OLD_GATEWAY)
                + getText(LanguageResource.WEB_INTERFACE_SCA_WRONG));
    }
}
```
这个例子除了说明变化因子有时就是写复用的边界外，还能看出一些问题：

**一**和**变化因子**都是我们主观的一种定义，并没有绝对的对错之分。而且随着需求的变化，业务的扩张，我们对**一个变化因子**的理解也会跟着产生变化。（我们最初是可以认为addIP是满足单一职责原则的，但后面随着需求的增加，我们开始认为它不再满足单一职责原则）


### 单一职责原则的不完整

我们再来回顾一下单一职责原则的定义：一个类应该只有一个变化因子。

这其实是不完整的。

我们结合到我们的日常编码工作来说，即一块代码应该只会因为一个变化因子发生变化而变化。我们再来看上面的代码片段X，如果我将它改成如下：

```
	private static final int LIFE_1 = 12;
	
	private static final int LIFE_2 = 12;
	
    public long getChildNum(int n) {
        long sum = 0;
        // 获取它的所有孩子的子孙数量
        for (int i = this.birthMonth; i <= Math.min(n, this.birthMonth + LIFE_1); i++) {
            // some code ...
        }
        // 自己还活着，再+1
        if (this.birthMonth + LIFE_2 > n) {
            sum += 1;
        }
        // some code ...
    }
```

你会认为它违反单一职责原则吗？

这段代码看起来就不顺眼，尽管我们很想说它不满足单一职责原则，但如果按照单一职责的定义来看，不得不说：它并没有！

- getChildNum函数只有一个变化因子，即计算兔子子孙数量的逻辑；
- LIFE_1这个变量也只有一个变化因子，就是兔子的寿命；
- LIFE_2这个变量同样也只有一个变化因子，也是兔子的寿命；

它完全满足单一职责原则的定义，一个软件单元只有一个变化因子。

一个孩子只有一个妈妈，但并不代表一个妈妈一定只有一个孩子；一个软件单元只有一个变化因子，并不代表一个变化因子只会影响一个软件单元。

所以，单一职责原则是不完整的，如果严谨一些，我们可以将它修改为：

**一个软件单元应该只有一个变化因子；一个变化因子应该只影响一个软件单元。**



到此为止，我们已经讲完了单一职责原则中的所有概念，

“变化因子”的概念已经注定我们不可能写出完美的代码，“变化”是我们对未来的主观预判，即对未来业务将会如果发展，需求将会如何变化的一种预估。

我们同样也可以将代码片段X中的checkIP不进行共用，完全做成两个完全相同但又互相独立的两个函数，它也仍然满足单一职责原则。

```
public boolean addIP(IPInfo ipInfo) {
    // 校验IP信息
    checkIP4Add(ipInfo);

    boolean isSuccess = CMDUtil.excuteCmd(SET_IP_CMD).isSuccess();
    return isSuccess;
}

public boolean updateIP(IPInfo ipInfo) {
    // 校验IP信息
    checkIP4Update(ipInfo);

    // some other code.
    return true;
}

private static void checkIP4Add(IPInfo ipInfo) {
    ...
}

private static void checkIP4Update(IPInfo ipInfo) {
    ...
}
```

TODO
举例说明变化因子是复用的边界
单一原则的负面作用
实际工作中如何学习变化因子，力所能力的找复用点，最重要的：维护代码的时候多体会当时如果写成什么样子，此时改动代价最小，然后重构成当前最理想的样子，久而久之心里会有一杆秤。



当然，道理非常很简单，但很多时候在发生变更之前，我们其实并不太容易把握准变更的点会在哪里。
就像上面的第二个例子一样，即使一开始大家都不知道最终需求会往哪个方向变化，但新手往往会写成方式四，而有经验的老手可能一开始就写成了方案一，两者的工作量在最初会相差无几，但是在后续代码的演进中，差距会越来越大（这不仅仅是代码本身带来的影响，还有一个重要的原因——破窗效应：在烂代码上会更容易滋生烂代码，而好代码则更不容易腐化）。

具体如何拆分，上面已经讨论过，通过识别“变化因子”来作为拆分的边界。但是当拆到很细节之处，“变化因子”会越来越模糊，比如常见的：**一个函数，有没有必须要再拆成几个子函数？**

如果你仍能清楚的看到未来的发展方向，找到其中的分割界限，那么该如何拆分，便如何拆分，这与函数的代码规模没有任何关系，即使只有两行，该拆还是得拆。但如果变化因子非常模糊（你不知道该拆还是不该拆）的时候，可以通过以下两个因素来决定是否拆分：

#### 1. 复杂

> 将函数分的过小，除了上面提到的增加阅读跳转次数外，还有一个非常重要的开销：命名。一个函数最为重要的部分就是命名，给一个拆出去的函数随便命名，比不拆带来的影响更为恶劣。函数如果拆的太细，往往需要花费我们大量时间斟酌函数名，尤其对于英语不好的程序员来说，会花费更多的时间，甚至经常花了时间想出来的名字仍然大有歧义。







变化因子的概念不难理解，但是寻找变化因子却是一件相当困难的事。

因为真实的软件系统往往并不会像上面的例子中有如此明确清晰的“边界”，一个功能应该放在哪个模块、抑或是一个函数应该放在哪个类，往往都能让人陷入两难的境地；很多时候还需要充分沟通和长时间的分析才能得出一些结论，**而且越到细节处，这些“变化因子”越难以寻找**。

“变化因子”往往需要结合业务才能分辨。
由于业务的易变性，“变化因子”也会跟着动态变化，无论我们的“一”拆解的多么完美，也会随着时间慢慢变得不正确——这也是我们的代码需要跟随业务持续重构的原因。


### 总结

一个大型软件系统要分成多个系统，一个系统要分成多个服务或模块，如果有需要会再划分为多个子模块，最后是一个个包，类和函数。
每个设计师都知道该如此划分，但难的是如何在合适的层级拆分出一个一个合理的“**一**”。
同一个软件产品，一千个设计师会有一千种分法，最终的好坏，与设计师本人的水平和经验，以及设计师对业务本身的理解和熟悉程度都息息相关。再加上软件需求的“动态变化”，导致这种拆分会更加困难。

所以系统一旦划分错误或者不合理，后果往往非常严重。比如应该划分在模块A的功能特性，实际上分到了B模块，后期想再纠正这个错误，会发现多个模块需要联动（不同的模块或子系统往往属于不同的部门，协调和沟通都相对困难），代价会十分昂贵。但是只要划分合理，最坏的结果也只是模块内部协调而已。

我们一般会在以下三种情况下拆分函数或类。
1. 变化因子：将有多个变化因子的函数或类拆分开，以期内部发生变化时互不影响；
2. 当前模块，类或函数规模过于庞大和复杂，难以理解；
3. 仅仅是单纯的想共用一些代码片段；

当变化因子不太明确，复杂度还不算太高，而且中间也不包含可共用的部分时，我们并没有必要为了拆分而去拆分一个函数或类；当后续发生变化后如果需要拆解时再来拆解，并不会带来太多额外工作量。当然，如果我们能提前预知到这些变化，当然最好。

> 复杂是一个主观的感受。写代码的人往往会因为对代码和业务更为熟悉会觉得相对简单很多，而对于后期的代码维护人员来说感觉又不一样，理解别人的代码都相对会困难一些。所以在我们考虑一个类或函数是否复杂的时候，应**尽量站在代码阅读者（维护者）的角度进行思考**。

本章更多的讲的是“**一**”和“**变化因子**”的概念，至于如何找到**变化因子**，再如何根据**变化因子**分解成一个一个合理的“**一**”却描述不多，我相信即使我再列举更多的例子也无法说明这个拆解过程，这个拆解的过程有一个非常响亮的名称——**抽象**。

之所以单一职责原则很难理解，正是因为抽象难于理解，而要掌握抽象则需要长时间的训练和实践。 

TODO 大只是需要拆分的警告，但不是真正原因。



// 两行也要拆

    private static int getInnerMsgType(Map<String, String> map) {
        int msgType = Integer.valueOf(map.get("MsgType"));
        return INNER_MSG_TYPE_CHANGER.containsKey(msgType) ? INNER_MSG_TYPE_CHANGER.get(msgType) : DEFAULT_MSG_TYPE;
    }

// TODO 一个全局变量的抽取，一个混合变量和多个小变量，这些拆解都是复用的体现？
理解了单一原则的人，建模都要好很多，理解了单一原则，就理解了抽象的核心部分（不包括抽象的高度）
